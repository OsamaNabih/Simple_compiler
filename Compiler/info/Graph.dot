// Generated by GNU Bison 3.0.4.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <http://www.gnu.org/software/bison/>.

digraph "grammar.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: . program $end\l"]
  0 -> 1 [style=dashed label="program"]
  0 -> 2 [style=dashed label="function"]
  0 -> "0R3" [style=solid]
 "0R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l  0 $accept: program . $end\l"]
  1 -> 3 [style=solid label="$end"]
  2 [label="State 2\n\l  1 program: function .\l  2 function: function . stmt\l"]
  2 -> 4 [style=solid label="INTEGER"]
  2 -> 5 [style=solid label="VARIABLE"]
  2 -> 6 [style=solid label="WHILE"]
  2 -> 7 [style=solid label="IF"]
  2 -> 8 [style=solid label="PRINT"]
  2 -> 9 [style=solid label="SWITCH"]
  2 -> 10 [style=solid label="NOT"]
  2 -> 11 [style=solid label="BIT_NOT"]
  2 -> 12 [style=solid label="'-'"]
  2 -> 13 [style=solid label="';'"]
  2 -> 14 [style=solid label="'('"]
  2 -> 15 [style=solid label="'{'"]
  2 -> 16 [style=dashed label="stmt"]
  2 -> 17 [style=dashed label="expr"]
  2 -> "2R1" [style=solid]
 "2R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l  0 $accept: program $end .\l"]
  3 -> "3R0" [style=solid]
 "3R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  4 [label="State 4\n\l 22 expr: INTEGER .\l"]
  4 -> "4R22" [style=solid]
 "4R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  5 [label="State 5\n\l  7 stmt: VARIABLE . '=' expr ';'\l 23 expr: VARIABLE .\l"]
  5 -> 18 [style=solid label="'='"]
  5 -> "5R23" [style=solid]
 "5R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l  8 stmt: WHILE . '(' expr ')' stmt\l"]
  6 -> 19 [style=solid label="'('"]
  7 [label="State 7\n\l  9 stmt: IF . '(' expr ')' stmt\l 10     | IF . '(' expr ')' stmt ELSE stmt\l"]
  7 -> 20 [style=solid label="'('"]
  8 [label="State 8\n\l  6 stmt: PRINT . expr ';'\l"]
  8 -> 4 [style=solid label="INTEGER"]
  8 -> 21 [style=solid label="VARIABLE"]
  8 -> 10 [style=solid label="NOT"]
  8 -> 11 [style=solid label="BIT_NOT"]
  8 -> 12 [style=solid label="'-'"]
  8 -> 14 [style=solid label="'('"]
  8 -> 22 [style=dashed label="expr"]
  9 [label="State 9\n\l 11 stmt: SWITCH . '(' expr ')' '{' case_stmt_list '}'\l"]
  9 -> 23 [style=solid label="'('"]
  10 [label="State 10\n\l 38 expr: NOT . expr\l"]
  10 -> 4 [style=solid label="INTEGER"]
  10 -> 21 [style=solid label="VARIABLE"]
  10 -> 10 [style=solid label="NOT"]
  10 -> 11 [style=solid label="BIT_NOT"]
  10 -> 12 [style=solid label="'-'"]
  10 -> 14 [style=solid label="'('"]
  10 -> 24 [style=dashed label="expr"]
  11 [label="State 11\n\l 42 expr: BIT_NOT . expr\l"]
  11 -> 4 [style=solid label="INTEGER"]
  11 -> 21 [style=solid label="VARIABLE"]
  11 -> 10 [style=solid label="NOT"]
  11 -> 11 [style=solid label="BIT_NOT"]
  11 -> 12 [style=solid label="'-'"]
  11 -> 14 [style=solid label="'('"]
  11 -> 25 [style=dashed label="expr"]
  12 [label="State 12\n\l 24 expr: '-' . expr\l"]
  12 -> 4 [style=solid label="INTEGER"]
  12 -> 21 [style=solid label="VARIABLE"]
  12 -> 10 [style=solid label="NOT"]
  12 -> 11 [style=solid label="BIT_NOT"]
  12 -> 12 [style=solid label="'-'"]
  12 -> 14 [style=solid label="'('"]
  12 -> 26 [style=dashed label="expr"]
  13 [label="State 13\n\l  4 stmt: ';' .\l"]
  13 -> "13R4" [style=solid]
 "13R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l 35 expr: '(' . expr ')'\l"]
  14 -> 4 [style=solid label="INTEGER"]
  14 -> 21 [style=solid label="VARIABLE"]
  14 -> 10 [style=solid label="NOT"]
  14 -> 11 [style=solid label="BIT_NOT"]
  14 -> 12 [style=solid label="'-'"]
  14 -> 14 [style=solid label="'('"]
  14 -> 27 [style=dashed label="expr"]
  15 [label="State 15\n\l 12 stmt: '{' . stmt_list '}'\l"]
  15 -> 4 [style=solid label="INTEGER"]
  15 -> 5 [style=solid label="VARIABLE"]
  15 -> 6 [style=solid label="WHILE"]
  15 -> 7 [style=solid label="IF"]
  15 -> 8 [style=solid label="PRINT"]
  15 -> 9 [style=solid label="SWITCH"]
  15 -> 10 [style=solid label="NOT"]
  15 -> 11 [style=solid label="BIT_NOT"]
  15 -> 12 [style=solid label="'-'"]
  15 -> 13 [style=solid label="';'"]
  15 -> 14 [style=solid label="'('"]
  15 -> 15 [style=solid label="'{'"]
  15 -> 28 [style=dashed label="stmt"]
  15 -> 29 [style=dashed label="stmt_list"]
  15 -> 17 [style=dashed label="expr"]
  16 [label="State 16\n\l  2 function: function stmt .\l"]
  16 -> "16R2" [style=solid]
 "16R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l  5 stmt: expr . ';'\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  17 -> 30 [style=solid label="AND"]
  17 -> 31 [style=solid label="OR"]
  17 -> 32 [style=solid label="BIT_OR"]
  17 -> 33 [style=solid label="BIT_AND"]
  17 -> 34 [style=solid label="BIT_XOR"]
  17 -> 35 [style=solid label="L_SHIFT"]
  17 -> 36 [style=solid label="R_SHIFT"]
  17 -> 37 [style=solid label="GE"]
  17 -> 38 [style=solid label="LE"]
  17 -> 39 [style=solid label="EQ"]
  17 -> 40 [style=solid label="NE"]
  17 -> 41 [style=solid label="'>'"]
  17 -> 42 [style=solid label="'<'"]
  17 -> 43 [style=solid label="'+'"]
  17 -> 44 [style=solid label="'-'"]
  17 -> 45 [style=solid label="'*'"]
  17 -> 46 [style=solid label="'/'"]
  17 -> 47 [style=solid label="';'"]
  18 [label="State 18\n\l  7 stmt: VARIABLE '=' . expr ';'\l"]
  18 -> 4 [style=solid label="INTEGER"]
  18 -> 21 [style=solid label="VARIABLE"]
  18 -> 10 [style=solid label="NOT"]
  18 -> 11 [style=solid label="BIT_NOT"]
  18 -> 12 [style=solid label="'-'"]
  18 -> 14 [style=solid label="'('"]
  18 -> 48 [style=dashed label="expr"]
  19 [label="State 19\n\l  8 stmt: WHILE '(' . expr ')' stmt\l"]
  19 -> 4 [style=solid label="INTEGER"]
  19 -> 21 [style=solid label="VARIABLE"]
  19 -> 10 [style=solid label="NOT"]
  19 -> 11 [style=solid label="BIT_NOT"]
  19 -> 12 [style=solid label="'-'"]
  19 -> 14 [style=solid label="'('"]
  19 -> 49 [style=dashed label="expr"]
  20 [label="State 20\n\l  9 stmt: IF '(' . expr ')' stmt\l 10     | IF '(' . expr ')' stmt ELSE stmt\l"]
  20 -> 4 [style=solid label="INTEGER"]
  20 -> 21 [style=solid label="VARIABLE"]
  20 -> 10 [style=solid label="NOT"]
  20 -> 11 [style=solid label="BIT_NOT"]
  20 -> 12 [style=solid label="'-'"]
  20 -> 14 [style=solid label="'('"]
  20 -> 50 [style=dashed label="expr"]
  21 [label="State 21\n\l 23 expr: VARIABLE .\l"]
  21 -> "21R23" [style=solid]
 "21R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l  6 stmt: PRINT expr . ';'\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  22 -> 30 [style=solid label="AND"]
  22 -> 31 [style=solid label="OR"]
  22 -> 32 [style=solid label="BIT_OR"]
  22 -> 33 [style=solid label="BIT_AND"]
  22 -> 34 [style=solid label="BIT_XOR"]
  22 -> 35 [style=solid label="L_SHIFT"]
  22 -> 36 [style=solid label="R_SHIFT"]
  22 -> 37 [style=solid label="GE"]
  22 -> 38 [style=solid label="LE"]
  22 -> 39 [style=solid label="EQ"]
  22 -> 40 [style=solid label="NE"]
  22 -> 41 [style=solid label="'>'"]
  22 -> 42 [style=solid label="'<'"]
  22 -> 43 [style=solid label="'+'"]
  22 -> 44 [style=solid label="'-'"]
  22 -> 45 [style=solid label="'*'"]
  22 -> 46 [style=solid label="'/'"]
  22 -> 51 [style=solid label="';'"]
  23 [label="State 23\n\l 11 stmt: SWITCH '(' . expr ')' '{' case_stmt_list '}'\l"]
  23 -> 4 [style=solid label="INTEGER"]
  23 -> 21 [style=solid label="VARIABLE"]
  23 -> 10 [style=solid label="NOT"]
  23 -> 11 [style=solid label="BIT_NOT"]
  23 -> 12 [style=solid label="'-'"]
  23 -> 14 [style=solid label="'('"]
  23 -> 52 [style=dashed label="expr"]
  24 [label="State 24\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 38     | NOT expr .\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  24 -> 32 [style=solid label="BIT_OR"]
  24 -> 33 [style=solid label="BIT_AND"]
  24 -> 34 [style=solid label="BIT_XOR"]
  24 -> 35 [style=solid label="L_SHIFT"]
  24 -> 36 [style=solid label="R_SHIFT"]
  24 -> 43 [style=solid label="'+'"]
  24 -> 44 [style=solid label="'-'"]
  24 -> 45 [style=solid label="'*'"]
  24 -> 46 [style=solid label="'/'"]
  24 -> "24R38" [style=solid]
 "24R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  25 [label="State 25\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 42     | BIT_NOT expr .\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  25 -> 43 [style=solid label="'+'"]
  25 -> 44 [style=solid label="'-'"]
  25 -> 45 [style=solid label="'*'"]
  25 -> 46 [style=solid label="'/'"]
  25 -> "25R42" [style=solid]
 "25R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  26 [label="State 26\n\l 24 expr: '-' expr .\l 25     | expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  26 -> "26R24" [style=solid]
 "26R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  27 [label="State 27\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 35     | '(' expr . ')'\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  27 -> 30 [style=solid label="AND"]
  27 -> 31 [style=solid label="OR"]
  27 -> 32 [style=solid label="BIT_OR"]
  27 -> 33 [style=solid label="BIT_AND"]
  27 -> 34 [style=solid label="BIT_XOR"]
  27 -> 35 [style=solid label="L_SHIFT"]
  27 -> 36 [style=solid label="R_SHIFT"]
  27 -> 37 [style=solid label="GE"]
  27 -> 38 [style=solid label="LE"]
  27 -> 39 [style=solid label="EQ"]
  27 -> 40 [style=solid label="NE"]
  27 -> 41 [style=solid label="'>'"]
  27 -> 42 [style=solid label="'<'"]
  27 -> 43 [style=solid label="'+'"]
  27 -> 44 [style=solid label="'-'"]
  27 -> 45 [style=solid label="'*'"]
  27 -> 46 [style=solid label="'/'"]
  27 -> 53 [style=solid label="')'"]
  28 [label="State 28\n\l 13 stmt_list: stmt .\l"]
  28 -> "28R13" [style=solid]
 "28R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l 12 stmt: '{' stmt_list . '}'\l 14 stmt_list: stmt_list . stmt\l"]
  29 -> 4 [style=solid label="INTEGER"]
  29 -> 5 [style=solid label="VARIABLE"]
  29 -> 6 [style=solid label="WHILE"]
  29 -> 7 [style=solid label="IF"]
  29 -> 8 [style=solid label="PRINT"]
  29 -> 9 [style=solid label="SWITCH"]
  29 -> 10 [style=solid label="NOT"]
  29 -> 11 [style=solid label="BIT_NOT"]
  29 -> 12 [style=solid label="'-'"]
  29 -> 13 [style=solid label="';'"]
  29 -> 14 [style=solid label="'('"]
  29 -> 15 [style=solid label="'{'"]
  29 -> 54 [style=solid label="'}'"]
  29 -> 55 [style=dashed label="stmt"]
  29 -> 17 [style=dashed label="expr"]
  30 [label="State 30\n\l 36 expr: expr AND . expr\l"]
  30 -> 4 [style=solid label="INTEGER"]
  30 -> 21 [style=solid label="VARIABLE"]
  30 -> 10 [style=solid label="NOT"]
  30 -> 11 [style=solid label="BIT_NOT"]
  30 -> 12 [style=solid label="'-'"]
  30 -> 14 [style=solid label="'('"]
  30 -> 56 [style=dashed label="expr"]
  31 [label="State 31\n\l 37 expr: expr OR . expr\l"]
  31 -> 4 [style=solid label="INTEGER"]
  31 -> 21 [style=solid label="VARIABLE"]
  31 -> 10 [style=solid label="NOT"]
  31 -> 11 [style=solid label="BIT_NOT"]
  31 -> 12 [style=solid label="'-'"]
  31 -> 14 [style=solid label="'('"]
  31 -> 57 [style=dashed label="expr"]
  32 [label="State 32\n\l 40 expr: expr BIT_OR . expr\l"]
  32 -> 4 [style=solid label="INTEGER"]
  32 -> 21 [style=solid label="VARIABLE"]
  32 -> 10 [style=solid label="NOT"]
  32 -> 11 [style=solid label="BIT_NOT"]
  32 -> 12 [style=solid label="'-'"]
  32 -> 14 [style=solid label="'('"]
  32 -> 58 [style=dashed label="expr"]
  33 [label="State 33\n\l 39 expr: expr BIT_AND . expr\l"]
  33 -> 4 [style=solid label="INTEGER"]
  33 -> 21 [style=solid label="VARIABLE"]
  33 -> 10 [style=solid label="NOT"]
  33 -> 11 [style=solid label="BIT_NOT"]
  33 -> 12 [style=solid label="'-'"]
  33 -> 14 [style=solid label="'('"]
  33 -> 59 [style=dashed label="expr"]
  34 [label="State 34\n\l 41 expr: expr BIT_XOR . expr\l"]
  34 -> 4 [style=solid label="INTEGER"]
  34 -> 21 [style=solid label="VARIABLE"]
  34 -> 10 [style=solid label="NOT"]
  34 -> 11 [style=solid label="BIT_NOT"]
  34 -> 12 [style=solid label="'-'"]
  34 -> 14 [style=solid label="'('"]
  34 -> 60 [style=dashed label="expr"]
  35 [label="State 35\n\l 43 expr: expr L_SHIFT . expr\l"]
  35 -> 4 [style=solid label="INTEGER"]
  35 -> 21 [style=solid label="VARIABLE"]
  35 -> 10 [style=solid label="NOT"]
  35 -> 11 [style=solid label="BIT_NOT"]
  35 -> 12 [style=solid label="'-'"]
  35 -> 14 [style=solid label="'('"]
  35 -> 61 [style=dashed label="expr"]
  36 [label="State 36\n\l 44 expr: expr R_SHIFT . expr\l"]
  36 -> 4 [style=solid label="INTEGER"]
  36 -> 21 [style=solid label="VARIABLE"]
  36 -> 10 [style=solid label="NOT"]
  36 -> 11 [style=solid label="BIT_NOT"]
  36 -> 12 [style=solid label="'-'"]
  36 -> 14 [style=solid label="'('"]
  36 -> 62 [style=dashed label="expr"]
  37 [label="State 37\n\l 31 expr: expr GE . expr\l"]
  37 -> 4 [style=solid label="INTEGER"]
  37 -> 21 [style=solid label="VARIABLE"]
  37 -> 10 [style=solid label="NOT"]
  37 -> 11 [style=solid label="BIT_NOT"]
  37 -> 12 [style=solid label="'-'"]
  37 -> 14 [style=solid label="'('"]
  37 -> 63 [style=dashed label="expr"]
  38 [label="State 38\n\l 32 expr: expr LE . expr\l"]
  38 -> 4 [style=solid label="INTEGER"]
  38 -> 21 [style=solid label="VARIABLE"]
  38 -> 10 [style=solid label="NOT"]
  38 -> 11 [style=solid label="BIT_NOT"]
  38 -> 12 [style=solid label="'-'"]
  38 -> 14 [style=solid label="'('"]
  38 -> 64 [style=dashed label="expr"]
  39 [label="State 39\n\l 34 expr: expr EQ . expr\l"]
  39 -> 4 [style=solid label="INTEGER"]
  39 -> 21 [style=solid label="VARIABLE"]
  39 -> 10 [style=solid label="NOT"]
  39 -> 11 [style=solid label="BIT_NOT"]
  39 -> 12 [style=solid label="'-'"]
  39 -> 14 [style=solid label="'('"]
  39 -> 65 [style=dashed label="expr"]
  40 [label="State 40\n\l 33 expr: expr NE . expr\l"]
  40 -> 4 [style=solid label="INTEGER"]
  40 -> 21 [style=solid label="VARIABLE"]
  40 -> 10 [style=solid label="NOT"]
  40 -> 11 [style=solid label="BIT_NOT"]
  40 -> 12 [style=solid label="'-'"]
  40 -> 14 [style=solid label="'('"]
  40 -> 66 [style=dashed label="expr"]
  41 [label="State 41\n\l 30 expr: expr '>' . expr\l"]
  41 -> 4 [style=solid label="INTEGER"]
  41 -> 21 [style=solid label="VARIABLE"]
  41 -> 10 [style=solid label="NOT"]
  41 -> 11 [style=solid label="BIT_NOT"]
  41 -> 12 [style=solid label="'-'"]
  41 -> 14 [style=solid label="'('"]
  41 -> 67 [style=dashed label="expr"]
  42 [label="State 42\n\l 29 expr: expr '<' . expr\l"]
  42 -> 4 [style=solid label="INTEGER"]
  42 -> 21 [style=solid label="VARIABLE"]
  42 -> 10 [style=solid label="NOT"]
  42 -> 11 [style=solid label="BIT_NOT"]
  42 -> 12 [style=solid label="'-'"]
  42 -> 14 [style=solid label="'('"]
  42 -> 68 [style=dashed label="expr"]
  43 [label="State 43\n\l 25 expr: expr '+' . expr\l"]
  43 -> 4 [style=solid label="INTEGER"]
  43 -> 21 [style=solid label="VARIABLE"]
  43 -> 10 [style=solid label="NOT"]
  43 -> 11 [style=solid label="BIT_NOT"]
  43 -> 12 [style=solid label="'-'"]
  43 -> 14 [style=solid label="'('"]
  43 -> 69 [style=dashed label="expr"]
  44 [label="State 44\n\l 26 expr: expr '-' . expr\l"]
  44 -> 4 [style=solid label="INTEGER"]
  44 -> 21 [style=solid label="VARIABLE"]
  44 -> 10 [style=solid label="NOT"]
  44 -> 11 [style=solid label="BIT_NOT"]
  44 -> 12 [style=solid label="'-'"]
  44 -> 14 [style=solid label="'('"]
  44 -> 70 [style=dashed label="expr"]
  45 [label="State 45\n\l 27 expr: expr '*' . expr\l"]
  45 -> 4 [style=solid label="INTEGER"]
  45 -> 21 [style=solid label="VARIABLE"]
  45 -> 10 [style=solid label="NOT"]
  45 -> 11 [style=solid label="BIT_NOT"]
  45 -> 12 [style=solid label="'-'"]
  45 -> 14 [style=solid label="'('"]
  45 -> 71 [style=dashed label="expr"]
  46 [label="State 46\n\l 28 expr: expr '/' . expr\l"]
  46 -> 4 [style=solid label="INTEGER"]
  46 -> 21 [style=solid label="VARIABLE"]
  46 -> 10 [style=solid label="NOT"]
  46 -> 11 [style=solid label="BIT_NOT"]
  46 -> 12 [style=solid label="'-'"]
  46 -> 14 [style=solid label="'('"]
  46 -> 72 [style=dashed label="expr"]
  47 [label="State 47\n\l  5 stmt: expr ';' .\l"]
  47 -> "47R5" [style=solid]
 "47R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  48 [label="State 48\n\l  7 stmt: VARIABLE '=' expr . ';'\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  48 -> 30 [style=solid label="AND"]
  48 -> 31 [style=solid label="OR"]
  48 -> 32 [style=solid label="BIT_OR"]
  48 -> 33 [style=solid label="BIT_AND"]
  48 -> 34 [style=solid label="BIT_XOR"]
  48 -> 35 [style=solid label="L_SHIFT"]
  48 -> 36 [style=solid label="R_SHIFT"]
  48 -> 37 [style=solid label="GE"]
  48 -> 38 [style=solid label="LE"]
  48 -> 39 [style=solid label="EQ"]
  48 -> 40 [style=solid label="NE"]
  48 -> 41 [style=solid label="'>'"]
  48 -> 42 [style=solid label="'<'"]
  48 -> 43 [style=solid label="'+'"]
  48 -> 44 [style=solid label="'-'"]
  48 -> 45 [style=solid label="'*'"]
  48 -> 46 [style=solid label="'/'"]
  48 -> 73 [style=solid label="';'"]
  49 [label="State 49\n\l  8 stmt: WHILE '(' expr . ')' stmt\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  49 -> 30 [style=solid label="AND"]
  49 -> 31 [style=solid label="OR"]
  49 -> 32 [style=solid label="BIT_OR"]
  49 -> 33 [style=solid label="BIT_AND"]
  49 -> 34 [style=solid label="BIT_XOR"]
  49 -> 35 [style=solid label="L_SHIFT"]
  49 -> 36 [style=solid label="R_SHIFT"]
  49 -> 37 [style=solid label="GE"]
  49 -> 38 [style=solid label="LE"]
  49 -> 39 [style=solid label="EQ"]
  49 -> 40 [style=solid label="NE"]
  49 -> 41 [style=solid label="'>'"]
  49 -> 42 [style=solid label="'<'"]
  49 -> 43 [style=solid label="'+'"]
  49 -> 44 [style=solid label="'-'"]
  49 -> 45 [style=solid label="'*'"]
  49 -> 46 [style=solid label="'/'"]
  49 -> 74 [style=solid label="')'"]
  50 [label="State 50\n\l  9 stmt: IF '(' expr . ')' stmt\l 10     | IF '(' expr . ')' stmt ELSE stmt\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  50 -> 30 [style=solid label="AND"]
  50 -> 31 [style=solid label="OR"]
  50 -> 32 [style=solid label="BIT_OR"]
  50 -> 33 [style=solid label="BIT_AND"]
  50 -> 34 [style=solid label="BIT_XOR"]
  50 -> 35 [style=solid label="L_SHIFT"]
  50 -> 36 [style=solid label="R_SHIFT"]
  50 -> 37 [style=solid label="GE"]
  50 -> 38 [style=solid label="LE"]
  50 -> 39 [style=solid label="EQ"]
  50 -> 40 [style=solid label="NE"]
  50 -> 41 [style=solid label="'>'"]
  50 -> 42 [style=solid label="'<'"]
  50 -> 43 [style=solid label="'+'"]
  50 -> 44 [style=solid label="'-'"]
  50 -> 45 [style=solid label="'*'"]
  50 -> 46 [style=solid label="'/'"]
  50 -> 75 [style=solid label="')'"]
  51 [label="State 51\n\l  6 stmt: PRINT expr ';' .\l"]
  51 -> "51R6" [style=solid]
 "51R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  52 [label="State 52\n\l 11 stmt: SWITCH '(' expr . ')' '{' case_stmt_list '}'\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  52 -> 30 [style=solid label="AND"]
  52 -> 31 [style=solid label="OR"]
  52 -> 32 [style=solid label="BIT_OR"]
  52 -> 33 [style=solid label="BIT_AND"]
  52 -> 34 [style=solid label="BIT_XOR"]
  52 -> 35 [style=solid label="L_SHIFT"]
  52 -> 36 [style=solid label="R_SHIFT"]
  52 -> 37 [style=solid label="GE"]
  52 -> 38 [style=solid label="LE"]
  52 -> 39 [style=solid label="EQ"]
  52 -> 40 [style=solid label="NE"]
  52 -> 41 [style=solid label="'>'"]
  52 -> 42 [style=solid label="'<'"]
  52 -> 43 [style=solid label="'+'"]
  52 -> 44 [style=solid label="'-'"]
  52 -> 45 [style=solid label="'*'"]
  52 -> 46 [style=solid label="'/'"]
  52 -> 76 [style=solid label="')'"]
  53 [label="State 53\n\l 35 expr: '(' expr ')' .\l"]
  53 -> "53R35" [style=solid]
 "53R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  54 [label="State 54\n\l 12 stmt: '{' stmt_list '}' .\l"]
  54 -> "54R12" [style=solid]
 "54R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l 14 stmt_list: stmt_list stmt .\l"]
  55 -> "55R14" [style=solid]
 "55R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  56 [label="State 56\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 36     | expr AND expr .\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  56 -> 32 [style=solid label="BIT_OR"]
  56 -> 33 [style=solid label="BIT_AND"]
  56 -> 34 [style=solid label="BIT_XOR"]
  56 -> 35 [style=solid label="L_SHIFT"]
  56 -> 36 [style=solid label="R_SHIFT"]
  56 -> 43 [style=solid label="'+'"]
  56 -> 44 [style=solid label="'-'"]
  56 -> 45 [style=solid label="'*'"]
  56 -> 46 [style=solid label="'/'"]
  56 -> "56R36" [style=solid]
 "56R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  57 [label="State 57\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 37     | expr OR expr .\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  57 -> 32 [style=solid label="BIT_OR"]
  57 -> 33 [style=solid label="BIT_AND"]
  57 -> 34 [style=solid label="BIT_XOR"]
  57 -> 35 [style=solid label="L_SHIFT"]
  57 -> 36 [style=solid label="R_SHIFT"]
  57 -> 43 [style=solid label="'+'"]
  57 -> 44 [style=solid label="'-'"]
  57 -> 45 [style=solid label="'*'"]
  57 -> 46 [style=solid label="'/'"]
  57 -> "57R37" [style=solid]
 "57R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 40     | expr BIT_OR expr .\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  58 -> 43 [style=solid label="'+'"]
  58 -> 44 [style=solid label="'-'"]
  58 -> 45 [style=solid label="'*'"]
  58 -> 46 [style=solid label="'/'"]
  58 -> "58R40" [style=solid]
 "58R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 39     | expr BIT_AND expr .\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  59 -> 43 [style=solid label="'+'"]
  59 -> 44 [style=solid label="'-'"]
  59 -> 45 [style=solid label="'*'"]
  59 -> 46 [style=solid label="'/'"]
  59 -> "59R39" [style=solid]
 "59R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 41     | expr BIT_XOR expr .\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  60 -> 43 [style=solid label="'+'"]
  60 -> 44 [style=solid label="'-'"]
  60 -> 45 [style=solid label="'*'"]
  60 -> 46 [style=solid label="'/'"]
  60 -> "60R41" [style=solid]
 "60R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 43     | expr L_SHIFT expr .\l 44     | expr . R_SHIFT expr\l"]
  61 -> 43 [style=solid label="'+'"]
  61 -> 44 [style=solid label="'-'"]
  61 -> 45 [style=solid label="'*'"]
  61 -> 46 [style=solid label="'/'"]
  61 -> "61R43" [style=solid]
 "61R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l 44     | expr R_SHIFT expr .\l"]
  62 -> 43 [style=solid label="'+'"]
  62 -> 44 [style=solid label="'-'"]
  62 -> 45 [style=solid label="'*'"]
  62 -> 46 [style=solid label="'/'"]
  62 -> "62R44" [style=solid]
 "62R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 31     | expr GE expr .\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  63 -> 32 [style=solid label="BIT_OR"]
  63 -> 33 [style=solid label="BIT_AND"]
  63 -> 34 [style=solid label="BIT_XOR"]
  63 -> 35 [style=solid label="L_SHIFT"]
  63 -> 36 [style=solid label="R_SHIFT"]
  63 -> 43 [style=solid label="'+'"]
  63 -> 44 [style=solid label="'-'"]
  63 -> 45 [style=solid label="'*'"]
  63 -> 46 [style=solid label="'/'"]
  63 -> "63R31" [style=solid]
 "63R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 32     | expr LE expr .\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  64 -> 32 [style=solid label="BIT_OR"]
  64 -> 33 [style=solid label="BIT_AND"]
  64 -> 34 [style=solid label="BIT_XOR"]
  64 -> 35 [style=solid label="L_SHIFT"]
  64 -> 36 [style=solid label="R_SHIFT"]
  64 -> 43 [style=solid label="'+'"]
  64 -> 44 [style=solid label="'-'"]
  64 -> 45 [style=solid label="'*'"]
  64 -> 46 [style=solid label="'/'"]
  64 -> "64R32" [style=solid]
 "64R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  65 [label="State 65\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 34     | expr EQ expr .\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  65 -> 32 [style=solid label="BIT_OR"]
  65 -> 33 [style=solid label="BIT_AND"]
  65 -> 34 [style=solid label="BIT_XOR"]
  65 -> 35 [style=solid label="L_SHIFT"]
  65 -> 36 [style=solid label="R_SHIFT"]
  65 -> 43 [style=solid label="'+'"]
  65 -> 44 [style=solid label="'-'"]
  65 -> 45 [style=solid label="'*'"]
  65 -> 46 [style=solid label="'/'"]
  65 -> "65R34" [style=solid]
 "65R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  66 [label="State 66\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 33     | expr NE expr .\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  66 -> 32 [style=solid label="BIT_OR"]
  66 -> 33 [style=solid label="BIT_AND"]
  66 -> 34 [style=solid label="BIT_XOR"]
  66 -> 35 [style=solid label="L_SHIFT"]
  66 -> 36 [style=solid label="R_SHIFT"]
  66 -> 43 [style=solid label="'+'"]
  66 -> 44 [style=solid label="'-'"]
  66 -> 45 [style=solid label="'*'"]
  66 -> 46 [style=solid label="'/'"]
  66 -> "66R33" [style=solid]
 "66R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 30     | expr '>' expr .\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  67 -> 32 [style=solid label="BIT_OR"]
  67 -> 33 [style=solid label="BIT_AND"]
  67 -> 34 [style=solid label="BIT_XOR"]
  67 -> 35 [style=solid label="L_SHIFT"]
  67 -> 36 [style=solid label="R_SHIFT"]
  67 -> 43 [style=solid label="'+'"]
  67 -> 44 [style=solid label="'-'"]
  67 -> 45 [style=solid label="'*'"]
  67 -> 46 [style=solid label="'/'"]
  67 -> "67R30" [style=solid]
 "67R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  68 [label="State 68\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 29     | expr '<' expr .\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  68 -> 32 [style=solid label="BIT_OR"]
  68 -> 33 [style=solid label="BIT_AND"]
  68 -> 34 [style=solid label="BIT_XOR"]
  68 -> 35 [style=solid label="L_SHIFT"]
  68 -> 36 [style=solid label="R_SHIFT"]
  68 -> 43 [style=solid label="'+'"]
  68 -> 44 [style=solid label="'-'"]
  68 -> 45 [style=solid label="'*'"]
  68 -> 46 [style=solid label="'/'"]
  68 -> "68R29" [style=solid]
 "68R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  69 [label="State 69\n\l 25 expr: expr . '+' expr\l 25     | expr '+' expr .\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  69 -> 45 [style=solid label="'*'"]
  69 -> 46 [style=solid label="'/'"]
  69 -> "69R25" [style=solid]
 "69R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  70 [label="State 70\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 26     | expr '-' expr .\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  70 -> 45 [style=solid label="'*'"]
  70 -> 46 [style=solid label="'/'"]
  70 -> "70R26" [style=solid]
 "70R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  71 [label="State 71\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 27     | expr '*' expr .\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  71 -> "71R27" [style=solid]
 "71R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  72 [label="State 72\n\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 28     | expr '/' expr .\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  72 -> "72R28" [style=solid]
 "72R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  73 [label="State 73\n\l  7 stmt: VARIABLE '=' expr ';' .\l"]
  73 -> "73R7" [style=solid]
 "73R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  74 [label="State 74\n\l  8 stmt: WHILE '(' expr ')' . stmt\l"]
  74 -> 4 [style=solid label="INTEGER"]
  74 -> 5 [style=solid label="VARIABLE"]
  74 -> 6 [style=solid label="WHILE"]
  74 -> 7 [style=solid label="IF"]
  74 -> 8 [style=solid label="PRINT"]
  74 -> 9 [style=solid label="SWITCH"]
  74 -> 10 [style=solid label="NOT"]
  74 -> 11 [style=solid label="BIT_NOT"]
  74 -> 12 [style=solid label="'-'"]
  74 -> 13 [style=solid label="';'"]
  74 -> 14 [style=solid label="'('"]
  74 -> 15 [style=solid label="'{'"]
  74 -> 77 [style=dashed label="stmt"]
  74 -> 17 [style=dashed label="expr"]
  75 [label="State 75\n\l  9 stmt: IF '(' expr ')' . stmt\l 10     | IF '(' expr ')' . stmt ELSE stmt\l"]
  75 -> 4 [style=solid label="INTEGER"]
  75 -> 5 [style=solid label="VARIABLE"]
  75 -> 6 [style=solid label="WHILE"]
  75 -> 7 [style=solid label="IF"]
  75 -> 8 [style=solid label="PRINT"]
  75 -> 9 [style=solid label="SWITCH"]
  75 -> 10 [style=solid label="NOT"]
  75 -> 11 [style=solid label="BIT_NOT"]
  75 -> 12 [style=solid label="'-'"]
  75 -> 13 [style=solid label="';'"]
  75 -> 14 [style=solid label="'('"]
  75 -> 15 [style=solid label="'{'"]
  75 -> 78 [style=dashed label="stmt"]
  75 -> 17 [style=dashed label="expr"]
  76 [label="State 76\n\l 11 stmt: SWITCH '(' expr ')' . '{' case_stmt_list '}'\l"]
  76 -> 79 [style=solid label="'{'"]
  77 [label="State 77\n\l  8 stmt: WHILE '(' expr ')' stmt .\l"]
  77 -> "77R8" [style=solid]
 "77R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  78 [label="State 78\n\l  9 stmt: IF '(' expr ')' stmt .\l 10     | IF '(' expr ')' stmt . ELSE stmt\l"]
  78 -> 80 [style=solid label="ELSE"]
  78 -> "78R9" [style=solid]
 "78R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l 11 stmt: SWITCH '(' expr ')' '{' . case_stmt_list '}'\l"]
  79 -> 81 [style=solid label="CASE"]
  79 -> 82 [style=solid label="DEFAULT"]
  79 -> 83 [style=dashed label="case_stmt"]
  79 -> 84 [style=dashed label="default_stmt"]
  79 -> 85 [style=dashed label="case_stmt_list"]
  80 [label="State 80\n\l 10 stmt: IF '(' expr ')' stmt ELSE . stmt\l"]
  80 -> 4 [style=solid label="INTEGER"]
  80 -> 5 [style=solid label="VARIABLE"]
  80 -> 6 [style=solid label="WHILE"]
  80 -> 7 [style=solid label="IF"]
  80 -> 8 [style=solid label="PRINT"]
  80 -> 9 [style=solid label="SWITCH"]
  80 -> 10 [style=solid label="NOT"]
  80 -> 11 [style=solid label="BIT_NOT"]
  80 -> 12 [style=solid label="'-'"]
  80 -> 13 [style=solid label="';'"]
  80 -> 14 [style=solid label="'('"]
  80 -> 15 [style=solid label="'{'"]
  80 -> 86 [style=dashed label="stmt"]
  80 -> 17 [style=dashed label="expr"]
  81 [label="State 81\n\l 15 case_stmt: CASE . '(' expr ')' ':' stmt_list BREAK ';'\l"]
  81 -> 87 [style=solid label="'('"]
  82 [label="State 82\n\l 16 default_stmt: DEFAULT . ':' stmt_list BREAK ';'\l"]
  82 -> 88 [style=solid label="':'"]
  83 [label="State 83\n\l 17 case_stmt_list: case_stmt .\l 19               | case_stmt . case_stmt_list\l"]
  83 -> 81 [style=solid label="CASE"]
  83 -> 82 [style=solid label="DEFAULT"]
  83 -> 83 [style=dashed label="case_stmt"]
  83 -> 84 [style=dashed label="default_stmt"]
  83 -> 89 [style=dashed label="case_stmt_list"]
  83 -> "83R17" [style=solid]
 "83R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  84 [label="State 84\n\l 18 case_stmt_list: default_stmt . case_stmt_no_def_list\l"]
  84 -> 81 [style=solid label="CASE"]
  84 -> 90 [style=dashed label="case_stmt"]
  84 -> 91 [style=dashed label="case_stmt_no_def_list"]
  84 -> "84R21" [style=solid]
 "84R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l 11 stmt: SWITCH '(' expr ')' '{' case_stmt_list . '}'\l"]
  85 -> 92 [style=solid label="'}'"]
  86 [label="State 86\n\l 10 stmt: IF '(' expr ')' stmt ELSE stmt .\l"]
  86 -> "86R10" [style=solid]
 "86R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  87 [label="State 87\n\l 15 case_stmt: CASE '(' . expr ')' ':' stmt_list BREAK ';'\l"]
  87 -> 4 [style=solid label="INTEGER"]
  87 -> 21 [style=solid label="VARIABLE"]
  87 -> 10 [style=solid label="NOT"]
  87 -> 11 [style=solid label="BIT_NOT"]
  87 -> 12 [style=solid label="'-'"]
  87 -> 14 [style=solid label="'('"]
  87 -> 93 [style=dashed label="expr"]
  88 [label="State 88\n\l 16 default_stmt: DEFAULT ':' . stmt_list BREAK ';'\l"]
  88 -> 4 [style=solid label="INTEGER"]
  88 -> 5 [style=solid label="VARIABLE"]
  88 -> 6 [style=solid label="WHILE"]
  88 -> 7 [style=solid label="IF"]
  88 -> 8 [style=solid label="PRINT"]
  88 -> 9 [style=solid label="SWITCH"]
  88 -> 10 [style=solid label="NOT"]
  88 -> 11 [style=solid label="BIT_NOT"]
  88 -> 12 [style=solid label="'-'"]
  88 -> 13 [style=solid label="';'"]
  88 -> 14 [style=solid label="'('"]
  88 -> 15 [style=solid label="'{'"]
  88 -> 28 [style=dashed label="stmt"]
  88 -> 94 [style=dashed label="stmt_list"]
  88 -> 17 [style=dashed label="expr"]
  89 [label="State 89\n\l 19 case_stmt_list: case_stmt case_stmt_list .\l"]
  89 -> "89R19" [style=solid]
 "89R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  90 [label="State 90\n\l 20 case_stmt_no_def_list: case_stmt . case_stmt_no_def_list\l"]
  90 -> 81 [style=solid label="CASE"]
  90 -> 90 [style=dashed label="case_stmt"]
  90 -> 95 [style=dashed label="case_stmt_no_def_list"]
  90 -> "90R21" [style=solid]
 "90R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  91 [label="State 91\n\l 18 case_stmt_list: default_stmt case_stmt_no_def_list .\l"]
  91 -> "91R18" [style=solid]
 "91R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  92 [label="State 92\n\l 11 stmt: SWITCH '(' expr ')' '{' case_stmt_list '}' .\l"]
  92 -> "92R11" [style=solid]
 "92R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  93 [label="State 93\n\l 15 case_stmt: CASE '(' expr . ')' ':' stmt_list BREAK ';'\l 25 expr: expr . '+' expr\l 26     | expr . '-' expr\l 27     | expr . '*' expr\l 28     | expr . '/' expr\l 29     | expr . '<' expr\l 30     | expr . '>' expr\l 31     | expr . GE expr\l 32     | expr . LE expr\l 33     | expr . NE expr\l 34     | expr . EQ expr\l 36     | expr . AND expr\l 37     | expr . OR expr\l 39     | expr . BIT_AND expr\l 40     | expr . BIT_OR expr\l 41     | expr . BIT_XOR expr\l 43     | expr . L_SHIFT expr\l 44     | expr . R_SHIFT expr\l"]
  93 -> 30 [style=solid label="AND"]
  93 -> 31 [style=solid label="OR"]
  93 -> 32 [style=solid label="BIT_OR"]
  93 -> 33 [style=solid label="BIT_AND"]
  93 -> 34 [style=solid label="BIT_XOR"]
  93 -> 35 [style=solid label="L_SHIFT"]
  93 -> 36 [style=solid label="R_SHIFT"]
  93 -> 37 [style=solid label="GE"]
  93 -> 38 [style=solid label="LE"]
  93 -> 39 [style=solid label="EQ"]
  93 -> 40 [style=solid label="NE"]
  93 -> 41 [style=solid label="'>'"]
  93 -> 42 [style=solid label="'<'"]
  93 -> 43 [style=solid label="'+'"]
  93 -> 44 [style=solid label="'-'"]
  93 -> 45 [style=solid label="'*'"]
  93 -> 46 [style=solid label="'/'"]
  93 -> 96 [style=solid label="')'"]
  94 [label="State 94\n\l 14 stmt_list: stmt_list . stmt\l 16 default_stmt: DEFAULT ':' stmt_list . BREAK ';'\l"]
  94 -> 4 [style=solid label="INTEGER"]
  94 -> 5 [style=solid label="VARIABLE"]
  94 -> 6 [style=solid label="WHILE"]
  94 -> 7 [style=solid label="IF"]
  94 -> 8 [style=solid label="PRINT"]
  94 -> 9 [style=solid label="SWITCH"]
  94 -> 97 [style=solid label="BREAK"]
  94 -> 10 [style=solid label="NOT"]
  94 -> 11 [style=solid label="BIT_NOT"]
  94 -> 12 [style=solid label="'-'"]
  94 -> 13 [style=solid label="';'"]
  94 -> 14 [style=solid label="'('"]
  94 -> 15 [style=solid label="'{'"]
  94 -> 55 [style=dashed label="stmt"]
  94 -> 17 [style=dashed label="expr"]
  95 [label="State 95\n\l 20 case_stmt_no_def_list: case_stmt case_stmt_no_def_list .\l"]
  95 -> "95R20" [style=solid]
 "95R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  96 [label="State 96\n\l 15 case_stmt: CASE '(' expr ')' . ':' stmt_list BREAK ';'\l"]
  96 -> 98 [style=solid label="':'"]
  97 [label="State 97\n\l 16 default_stmt: DEFAULT ':' stmt_list BREAK . ';'\l"]
  97 -> 99 [style=solid label="';'"]
  98 [label="State 98\n\l 15 case_stmt: CASE '(' expr ')' ':' . stmt_list BREAK ';'\l"]
  98 -> 4 [style=solid label="INTEGER"]
  98 -> 5 [style=solid label="VARIABLE"]
  98 -> 6 [style=solid label="WHILE"]
  98 -> 7 [style=solid label="IF"]
  98 -> 8 [style=solid label="PRINT"]
  98 -> 9 [style=solid label="SWITCH"]
  98 -> 10 [style=solid label="NOT"]
  98 -> 11 [style=solid label="BIT_NOT"]
  98 -> 12 [style=solid label="'-'"]
  98 -> 13 [style=solid label="';'"]
  98 -> 14 [style=solid label="'('"]
  98 -> 15 [style=solid label="'{'"]
  98 -> 28 [style=dashed label="stmt"]
  98 -> 100 [style=dashed label="stmt_list"]
  98 -> 17 [style=dashed label="expr"]
  99 [label="State 99\n\l 16 default_stmt: DEFAULT ':' stmt_list BREAK ';' .\l"]
  99 -> "99R16" [style=solid]
 "99R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l 14 stmt_list: stmt_list . stmt\l 15 case_stmt: CASE '(' expr ')' ':' stmt_list . BREAK ';'\l"]
  100 -> 4 [style=solid label="INTEGER"]
  100 -> 5 [style=solid label="VARIABLE"]
  100 -> 6 [style=solid label="WHILE"]
  100 -> 7 [style=solid label="IF"]
  100 -> 8 [style=solid label="PRINT"]
  100 -> 9 [style=solid label="SWITCH"]
  100 -> 101 [style=solid label="BREAK"]
  100 -> 10 [style=solid label="NOT"]
  100 -> 11 [style=solid label="BIT_NOT"]
  100 -> 12 [style=solid label="'-'"]
  100 -> 13 [style=solid label="';'"]
  100 -> 14 [style=solid label="'('"]
  100 -> 15 [style=solid label="'{'"]
  100 -> 55 [style=dashed label="stmt"]
  100 -> 17 [style=dashed label="expr"]
  101 [label="State 101\n\l 15 case_stmt: CASE '(' expr ')' ':' stmt_list BREAK . ';'\l"]
  101 -> 102 [style=solid label="';'"]
  102 [label="State 102\n\l 15 case_stmt: CASE '(' expr ')' ':' stmt_list BREAK ';' .\l"]
  102 -> "102R15" [style=solid]
 "102R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
}

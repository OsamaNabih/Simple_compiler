Grammar

    0 $accept: program $end

    1 program: function

    2 function: function stmt
    3         | %empty

    4 stmt: ';'
    5     | expr ';'
    6     | PRINT expr ';'
    7     | VARIABLE '=' expr ';'
    8     | WHILE '(' expr ')' stmt
    9     | IF '(' expr ')' stmt
   10     | IF '(' expr ')' stmt ELSE stmt
   11     | SWITCH '(' expr ')' '{' switch_body '}'
   12     | '{' stmt_list '}'

   13 stmt_list: stmt
   14          | stmt_list stmt

   15 case_stmt: CASE '(' expr ')' ':' stmt_list BREAK ';'

   16 default_stmt: DEFAULT ':' stmt_list BREAK ';'

   17 case_stmt_list: case_stmt
   18               | case_stmt_list case_stmt

   19 switch_body: case_stmt_list
   20            | case_stmt_list default_stmt

   21 expr: INTEGER
   22     | DOUBLE
   23     | VARIABLE
   24     | '-' expr
   25     | expr '+' expr
   26     | expr '-' expr
   27     | expr '*' expr
   28     | expr '/' expr
   29     | expr '<' expr
   30     | expr '>' expr
   31     | expr GE expr
   32     | expr LE expr
   33     | expr NE expr
   34     | expr EQ expr
   35     | '(' expr ')'
   36     | expr AND expr
   37     | expr OR expr
   38     | NOT expr
   39     | expr BIT_AND expr
   40     | expr BIT_OR expr
   41     | expr BIT_XOR expr
   42     | BIT_NOT expr
   43     | expr L_SHIFT expr
   44     | expr R_SHIFT expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 8 9 10 11 15 35
')' (41) 8 9 10 11 15 35
'*' (42) 27
'+' (43) 25
'-' (45) 24 26
'/' (47) 28
':' (58) 15 16
';' (59) 4 5 6 7 15 16
'<' (60) 29
'=' (61) 7
'>' (62) 30
'{' (123) 11 12
'}' (125) 11 12
error (256)
INTEGER (258) 21
VARIABLE (259) 7 23
DOUBLE (260) 22
WHILE (261) 8
IF (262) 9 10
PRINT (263) 6
SWITCH (264) 11
CASE (265) 15
DEFAULT (266) 16
BREAK (267) 15 16
AND (268) 36
OR (269) 37
NOT (270) 38
BIT_OR (271) 40
BIT_AND (272) 39
BIT_XOR (273) 41
BIT_NOT (274) 42
L_SHIFT (275) 43
R_SHIFT (276) 44
IFX (277)
ELSE (278) 10
GE (279) 31
LE (280) 32
EQ (281) 34
NE (282) 33
UMINUS (283)


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
program (43)
    on left: 1, on right: 0
function (44)
    on left: 2 3, on right: 1 2
stmt (45)
    on left: 4 5 6 7 8 9 10 11 12, on right: 2 8 9 10 13 14
stmt_list (46)
    on left: 13 14, on right: 12 14 15 16
case_stmt (47)
    on left: 15, on right: 17 18
default_stmt (48)
    on left: 16, on right: 20
case_stmt_list (49)
    on left: 17 18, on right: 18 19 20
switch_body (50)
    on left: 19 20, on right: 11
expr (51)
    on left: 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
    39 40 41 42 43 44, on right: 5 6 7 8 9 10 11 15 24 25 26 27 28
    29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (function)

    program   go to state 1
    function  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: function .
    2 function: function . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16

    $default  reduce using rule 1 (program)

    stmt  go to state 17
    expr  go to state 18


State 3

    0 $accept: program $end .

    $default  accept


State 4

   21 expr: INTEGER .

    $default  reduce using rule 21 (expr)


State 5

    7 stmt: VARIABLE . '=' expr ';'
   23 expr: VARIABLE .

    '='  shift, and go to state 19

    $default  reduce using rule 23 (expr)


State 6

   22 expr: DOUBLE .

    $default  reduce using rule 22 (expr)


State 7

    8 stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 20


State 8

    9 stmt: IF . '(' expr ')' stmt
   10     | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 21


State 9

    6 stmt: PRINT . expr ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 23


State 10

   11 stmt: SWITCH . '(' expr ')' '{' switch_body '}'

    '('  shift, and go to state 24


State 11

   38 expr: NOT . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 25


State 12

   42 expr: BIT_NOT . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 26


State 13

   24 expr: '-' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 27


State 14

    4 stmt: ';' .

    $default  reduce using rule 4 (stmt)


State 15

   35 expr: '(' . expr ')'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 28


State 16

   12 stmt: '{' . stmt_list '}'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16

    stmt       go to state 29
    stmt_list  go to state 30
    expr       go to state 18


State 17

    2 function: function stmt .

    $default  reduce using rule 2 (function)


State 18

    5 stmt: expr . ';'
   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    AND      shift, and go to state 31
    OR       shift, and go to state 32
    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    GE       shift, and go to state 38
    LE       shift, and go to state 39
    EQ       shift, and go to state 40
    NE       shift, and go to state 41
    '>'      shift, and go to state 42
    '<'      shift, and go to state 43
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47
    ';'      shift, and go to state 48


State 19

    7 stmt: VARIABLE '=' . expr ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 49


State 20

    8 stmt: WHILE '(' . expr ')' stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 50


State 21

    9 stmt: IF '(' . expr ')' stmt
   10     | IF '(' . expr ')' stmt ELSE stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 51


State 22

   23 expr: VARIABLE .

    $default  reduce using rule 23 (expr)


State 23

    6 stmt: PRINT expr . ';'
   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    AND      shift, and go to state 31
    OR       shift, and go to state 32
    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    GE       shift, and go to state 38
    LE       shift, and go to state 39
    EQ       shift, and go to state 40
    NE       shift, and go to state 41
    '>'      shift, and go to state 42
    '<'      shift, and go to state 43
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47
    ';'      shift, and go to state 52


State 24

   11 stmt: SWITCH '(' . expr ')' '{' switch_body '}'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 53


State 25

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   38     | NOT expr .
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47

    $default  reduce using rule 38 (expr)


State 26

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   42     | BIT_NOT expr .
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45
    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 42 (expr)


State 27

   24 expr: '-' expr .
   25     | expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    $default  reduce using rule 24 (expr)


State 28

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   35     | '(' expr . ')'
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    AND      shift, and go to state 31
    OR       shift, and go to state 32
    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    GE       shift, and go to state 38
    LE       shift, and go to state 39
    EQ       shift, and go to state 40
    NE       shift, and go to state 41
    '>'      shift, and go to state 42
    '<'      shift, and go to state 43
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47
    ')'      shift, and go to state 54


State 29

   13 stmt_list: stmt .

    $default  reduce using rule 13 (stmt_list)


State 30

   12 stmt: '{' stmt_list . '}'
   14 stmt_list: stmt_list . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    '}'       shift, and go to state 55

    stmt  go to state 56
    expr  go to state 18


State 31

   36 expr: expr AND . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 57


State 32

   37 expr: expr OR . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 58


State 33

   40 expr: expr BIT_OR . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 59


State 34

   39 expr: expr BIT_AND . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 60


State 35

   41 expr: expr BIT_XOR . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 61


State 36

   43 expr: expr L_SHIFT . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 62


State 37

   44 expr: expr R_SHIFT . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 63


State 38

   31 expr: expr GE . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 64


State 39

   32 expr: expr LE . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 65


State 40

   34 expr: expr EQ . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 66


State 41

   33 expr: expr NE . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 67


State 42

   30 expr: expr '>' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 68


State 43

   29 expr: expr '<' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 69


State 44

   25 expr: expr '+' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 70


State 45

   26 expr: expr '-' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 71


State 46

   27 expr: expr '*' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 72


State 47

   28 expr: expr '/' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 73


State 48

    5 stmt: expr ';' .

    $default  reduce using rule 5 (stmt)


State 49

    7 stmt: VARIABLE '=' expr . ';'
   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    AND      shift, and go to state 31
    OR       shift, and go to state 32
    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    GE       shift, and go to state 38
    LE       shift, and go to state 39
    EQ       shift, and go to state 40
    NE       shift, and go to state 41
    '>'      shift, and go to state 42
    '<'      shift, and go to state 43
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47
    ';'      shift, and go to state 74


State 50

    8 stmt: WHILE '(' expr . ')' stmt
   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    AND      shift, and go to state 31
    OR       shift, and go to state 32
    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    GE       shift, and go to state 38
    LE       shift, and go to state 39
    EQ       shift, and go to state 40
    NE       shift, and go to state 41
    '>'      shift, and go to state 42
    '<'      shift, and go to state 43
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47
    ')'      shift, and go to state 75


State 51

    9 stmt: IF '(' expr . ')' stmt
   10     | IF '(' expr . ')' stmt ELSE stmt
   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    AND      shift, and go to state 31
    OR       shift, and go to state 32
    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    GE       shift, and go to state 38
    LE       shift, and go to state 39
    EQ       shift, and go to state 40
    NE       shift, and go to state 41
    '>'      shift, and go to state 42
    '<'      shift, and go to state 43
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47
    ')'      shift, and go to state 76


State 52

    6 stmt: PRINT expr ';' .

    $default  reduce using rule 6 (stmt)


State 53

   11 stmt: SWITCH '(' expr . ')' '{' switch_body '}'
   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    AND      shift, and go to state 31
    OR       shift, and go to state 32
    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    GE       shift, and go to state 38
    LE       shift, and go to state 39
    EQ       shift, and go to state 40
    NE       shift, and go to state 41
    '>'      shift, and go to state 42
    '<'      shift, and go to state 43
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47
    ')'      shift, and go to state 77


State 54

   35 expr: '(' expr ')' .

    $default  reduce using rule 35 (expr)


State 55

   12 stmt: '{' stmt_list '}' .

    $default  reduce using rule 12 (stmt)


State 56

   14 stmt_list: stmt_list stmt .

    $default  reduce using rule 14 (stmt_list)


State 57

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   36     | expr AND expr .
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47

    $default  reduce using rule 36 (expr)


State 58

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   37     | expr OR expr .
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47

    $default  reduce using rule 37 (expr)


State 59

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   40     | expr BIT_OR expr .
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45
    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 40 (expr)


State 60

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   39     | expr BIT_AND expr .
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45
    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 39 (expr)


State 61

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   41     | expr BIT_XOR expr .
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45
    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 41 (expr)


State 62

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   43     | expr L_SHIFT expr .
   44     | expr . R_SHIFT expr

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45
    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 43 (expr)


State 63

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr
   44     | expr R_SHIFT expr .

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45
    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 44 (expr)


State 64

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   31     | expr GE expr .
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47

    $default  reduce using rule 31 (expr)


State 65

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   32     | expr LE expr .
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47

    $default  reduce using rule 32 (expr)


State 66

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   34     | expr EQ expr .
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47

    $default  reduce using rule 34 (expr)


State 67

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   33     | expr NE expr .
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47

    $default  reduce using rule 33 (expr)


State 68

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   30     | expr '>' expr .
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47

    $default  reduce using rule 30 (expr)


State 69

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   29     | expr '<' expr .
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47

    $default  reduce using rule 29 (expr)


State 70

   25 expr: expr . '+' expr
   25     | expr '+' expr .
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 25 (expr)


State 71

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   26     | expr '-' expr .
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 26 (expr)


State 72

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   27     | expr '*' expr .
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    $default  reduce using rule 27 (expr)


State 73

   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   28     | expr '/' expr .
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    $default  reduce using rule 28 (expr)


State 74

    7 stmt: VARIABLE '=' expr ';' .

    $default  reduce using rule 7 (stmt)


State 75

    8 stmt: WHILE '(' expr ')' . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16

    stmt  go to state 78
    expr  go to state 18


State 76

    9 stmt: IF '(' expr ')' . stmt
   10     | IF '(' expr ')' . stmt ELSE stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16

    stmt  go to state 79
    expr  go to state 18


State 77

   11 stmt: SWITCH '(' expr ')' . '{' switch_body '}'

    '{'  shift, and go to state 80


State 78

    8 stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 8 (stmt)


State 79

    9 stmt: IF '(' expr ')' stmt .
   10     | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 81

    $default  reduce using rule 9 (stmt)


State 80

   11 stmt: SWITCH '(' expr ')' '{' . switch_body '}'

    CASE  shift, and go to state 82

    case_stmt       go to state 83
    case_stmt_list  go to state 84
    switch_body     go to state 85


State 81

   10 stmt: IF '(' expr ')' stmt ELSE . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16

    stmt  go to state 86
    expr  go to state 18


State 82

   15 case_stmt: CASE . '(' expr ')' ':' stmt_list BREAK ';'

    '('  shift, and go to state 87


State 83

   17 case_stmt_list: case_stmt .

    $default  reduce using rule 17 (case_stmt_list)


State 84

   18 case_stmt_list: case_stmt_list . case_stmt
   19 switch_body: case_stmt_list .
   20            | case_stmt_list . default_stmt

    CASE     shift, and go to state 82
    DEFAULT  shift, and go to state 88

    $default  reduce using rule 19 (switch_body)

    case_stmt     go to state 89
    default_stmt  go to state 90


State 85

   11 stmt: SWITCH '(' expr ')' '{' switch_body . '}'

    '}'  shift, and go to state 91


State 86

   10 stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 10 (stmt)


State 87

   15 case_stmt: CASE '(' . expr ')' ':' stmt_list BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    '('       shift, and go to state 15

    expr  go to state 92


State 88

   16 default_stmt: DEFAULT . ':' stmt_list BREAK ';'

    ':'  shift, and go to state 93


State 89

   18 case_stmt_list: case_stmt_list case_stmt .

    $default  reduce using rule 18 (case_stmt_list)


State 90

   20 switch_body: case_stmt_list default_stmt .

    $default  reduce using rule 20 (switch_body)


State 91

   11 stmt: SWITCH '(' expr ')' '{' switch_body '}' .

    $default  reduce using rule 11 (stmt)


State 92

   15 case_stmt: CASE '(' expr . ')' ':' stmt_list BREAK ';'
   25 expr: expr . '+' expr
   26     | expr . '-' expr
   27     | expr . '*' expr
   28     | expr . '/' expr
   29     | expr . '<' expr
   30     | expr . '>' expr
   31     | expr . GE expr
   32     | expr . LE expr
   33     | expr . NE expr
   34     | expr . EQ expr
   36     | expr . AND expr
   37     | expr . OR expr
   39     | expr . BIT_AND expr
   40     | expr . BIT_OR expr
   41     | expr . BIT_XOR expr
   43     | expr . L_SHIFT expr
   44     | expr . R_SHIFT expr

    AND      shift, and go to state 31
    OR       shift, and go to state 32
    BIT_OR   shift, and go to state 33
    BIT_AND  shift, and go to state 34
    BIT_XOR  shift, and go to state 35
    L_SHIFT  shift, and go to state 36
    R_SHIFT  shift, and go to state 37
    GE       shift, and go to state 38
    LE       shift, and go to state 39
    EQ       shift, and go to state 40
    NE       shift, and go to state 41
    '>'      shift, and go to state 42
    '<'      shift, and go to state 43
    '+'      shift, and go to state 44
    '-'      shift, and go to state 45
    '*'      shift, and go to state 46
    '/'      shift, and go to state 47
    ')'      shift, and go to state 94


State 93

   16 default_stmt: DEFAULT ':' . stmt_list BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16

    stmt       go to state 29
    stmt_list  go to state 95
    expr       go to state 18


State 94

   15 case_stmt: CASE '(' expr ')' . ':' stmt_list BREAK ';'

    ':'  shift, and go to state 96


State 95

   14 stmt_list: stmt_list . stmt
   16 default_stmt: DEFAULT ':' stmt_list . BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    BREAK     shift, and go to state 97
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16

    stmt  go to state 56
    expr  go to state 18


State 96

   15 case_stmt: CASE '(' expr ')' ':' . stmt_list BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16

    stmt       go to state 29
    stmt_list  go to state 98
    expr       go to state 18


State 97

   16 default_stmt: DEFAULT ':' stmt_list BREAK . ';'

    ';'  shift, and go to state 99


State 98

   14 stmt_list: stmt_list . stmt
   15 case_stmt: CASE '(' expr ')' ':' stmt_list . BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    IF        shift, and go to state 8
    PRINT     shift, and go to state 9
    SWITCH    shift, and go to state 10
    BREAK     shift, and go to state 100
    NOT       shift, and go to state 11
    BIT_NOT   shift, and go to state 12
    '-'       shift, and go to state 13
    ';'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16

    stmt  go to state 56
    expr  go to state 18


State 99

   16 default_stmt: DEFAULT ':' stmt_list BREAK ';' .

    $default  reduce using rule 16 (default_stmt)


State 100

   15 case_stmt: CASE '(' expr ')' ':' stmt_list BREAK . ';'

    ';'  shift, and go to state 101


State 101

   15 case_stmt: CASE '(' expr ')' ':' stmt_list BREAK ';' .

    $default  reduce using rule 15 (case_stmt)

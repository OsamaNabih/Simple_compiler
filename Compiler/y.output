Terminals unused in grammar

   INT_TYPE
   DOUBLE_TYPE
   CHAR_TYPE
   STRING_TYPE
   POST_INC
   POST_DEC
   PRE_INC
   PRE_DEC
   POST


Grammar

    0 $accept: program $end

    1 program: function

    2 function: function stmt
    3         | %empty

    4 stmt: ';'
    5     | expr ';'
    6     | PRINT expr ';'
    7     | VARIABLE '=' expr ';'
    8     | WHILE '(' expr ')' stmt
    9     | IF '(' expr ')' stmt
   10     | IF '(' expr ')' stmt ELSE stmt
   11     | SWITCH '(' expr ')' '{' switch_body '}'
   12     | FOR '(' expr ';' expr ';' expr ';' ')' stmt
   13     | '{' stmt_list '}'

   14 stmt_list: stmt
   15          | stmt_list stmt

   16 case_stmt: CASE '(' expr ')' ':' stmt_list BREAK ';'

   17 default_stmt: DEFAULT ':' stmt_list BREAK ';'

   18 case_stmt_list: case_stmt
   19               | case_stmt_list case_stmt

   20 switch_body: case_stmt_list
   21            | case_stmt_list default_stmt

   22 expr: INTEGER
   23     | DOUBLE
   24     | VARIABLE
   25     | '-' expr
   26     | expr '+' expr
   27     | expr '-' expr
   28     | expr '*' expr
   29     | expr '/' expr
   30     | expr '<' expr
   31     | expr '>' expr
   32     | expr GE expr
   33     | expr LE expr
   34     | expr NE expr
   35     | expr EQ expr
   36     | '(' expr ')'
   37     | expr AND expr
   38     | expr OR expr
   39     | NOT expr
   40     | expr BIT_AND expr
   41     | expr BIT_OR expr
   42     | expr BIT_XOR expr
   43     | BIT_NOT expr
   44     | expr L_SHIFT expr
   45     | expr R_SHIFT expr
   46     | VARIABLE INC
   47     | VARIABLE DEC
   48     | INC VARIABLE
   49     | DEC VARIABLE


Terminals, with rules where they appear

$end (0) 0
'(' (40) 8 9 10 11 12 16 36
')' (41) 8 9 10 11 12 16 36
'*' (42) 28
'+' (43) 26
'-' (45) 25 27
'/' (47) 29
':' (58) 16 17
';' (59) 4 5 6 7 12 16 17
'<' (60) 30
'=' (61) 7
'>' (62) 31
'{' (123) 11 13
'}' (125) 11 13
error (256)
INTEGER (258) 22
VARIABLE (259) 7 24 46 47 48 49
DOUBLE (260) 23
INT_TYPE (261)
DOUBLE_TYPE (262)
CHAR_TYPE (263)
STRING_TYPE (264)
WHILE (265) 8
FOR (266) 12
IF (267) 9 10
PRINT (268) 6
SWITCH (269) 11
CASE (270) 16
DEFAULT (271) 17
BREAK (272) 16 17
AND (273) 37
OR (274) 38
NOT (275) 39
BIT_OR (276) 41
BIT_AND (277) 40
BIT_XOR (278) 42
BIT_NOT (279) 43
L_SHIFT (280) 44
R_SHIFT (281) 45
INC (282) 46 48
DEC (283) 47 49
POST_INC (284)
POST_DEC (285)
PRE_INC (286)
PRE_DEC (287)
IFX (288)
ELSE (289) 10
POST (290)
GE (291) 32
LE (292) 33
EQ (293) 35
NE (294) 34
UMINUS (295)


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
program (55)
    on left: 1, on right: 0
function (56)
    on left: 2 3, on right: 1 2
stmt (57)
    on left: 4 5 6 7 8 9 10 11 12 13, on right: 2 8 9 10 12 14 15
stmt_list (58)
    on left: 14 15, on right: 13 15 16 17
case_stmt (59)
    on left: 16, on right: 18 19
default_stmt (60)
    on left: 17, on right: 21
case_stmt_list (61)
    on left: 18 19, on right: 19 20 21
switch_body (62)
    on left: 20 21, on right: 11
expr (63)
    on left: 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
    40 41 42 43 44 45 46 47 48 49, on right: 5 6 7 8 9 10 11 12 16
    25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (function)

    program   go to state 1
    function  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: function .
    2 function: function . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    $default  reduce using rule 1 (program)

    stmt  go to state 20
    expr  go to state 21


State 3

    0 $accept: program $end .

    $default  accept


State 4

   22 expr: INTEGER .

    $default  reduce using rule 22 (expr)


State 5

    7 stmt: VARIABLE . '=' expr ';'
   24 expr: VARIABLE .
   46     | VARIABLE . INC
   47     | VARIABLE . DEC

    INC  shift, and go to state 22
    DEC  shift, and go to state 23
    '='  shift, and go to state 24

    $default  reduce using rule 24 (expr)


State 6

   23 expr: DOUBLE .

    $default  reduce using rule 23 (expr)


State 7

    8 stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 25


State 8

   12 stmt: FOR . '(' expr ';' expr ';' expr ';' ')' stmt

    '('  shift, and go to state 26


State 9

    9 stmt: IF . '(' expr ')' stmt
   10     | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 27


State 10

    6 stmt: PRINT . expr ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 29


State 11

   11 stmt: SWITCH . '(' expr ')' '{' switch_body '}'

    '('  shift, and go to state 30


State 12

   39 expr: NOT . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 31


State 13

   43 expr: BIT_NOT . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 32


State 14

   48 expr: INC . VARIABLE

    VARIABLE  shift, and go to state 33


State 15

   49 expr: DEC . VARIABLE

    VARIABLE  shift, and go to state 34


State 16

   25 expr: '-' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 35


State 17

    4 stmt: ';' .

    $default  reduce using rule 4 (stmt)


State 18

   36 expr: '(' . expr ')'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 36


State 19

   13 stmt: '{' . stmt_list '}'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    stmt       go to state 37
    stmt_list  go to state 38
    expr       go to state 21


State 20

    2 function: function stmt .

    $default  reduce using rule 2 (function)


State 21

    5 stmt: expr . ';'
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ';'      shift, and go to state 56


State 22

   46 expr: VARIABLE INC .

    $default  reduce using rule 46 (expr)


State 23

   47 expr: VARIABLE DEC .

    $default  reduce using rule 47 (expr)


State 24

    7 stmt: VARIABLE '=' . expr ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 57


State 25

    8 stmt: WHILE '(' . expr ')' stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 58


State 26

   12 stmt: FOR '(' . expr ';' expr ';' expr ';' ')' stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 59


State 27

    9 stmt: IF '(' . expr ')' stmt
   10     | IF '(' . expr ')' stmt ELSE stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 60


State 28

   24 expr: VARIABLE .
   46     | VARIABLE . INC
   47     | VARIABLE . DEC

    INC  shift, and go to state 22
    DEC  shift, and go to state 23

    $default  reduce using rule 24 (expr)


State 29

    6 stmt: PRINT expr . ';'
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ';'      shift, and go to state 61


State 30

   11 stmt: SWITCH '(' . expr ')' '{' switch_body '}'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 62


State 31

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   39     | NOT expr .
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55

    $default  reduce using rule 39 (expr)


State 32

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   43     | BIT_NOT expr .
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    '+'  shift, and go to state 52
    '-'  shift, and go to state 53
    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 43 (expr)


State 33

   48 expr: INC VARIABLE .

    $default  reduce using rule 48 (expr)


State 34

   49 expr: DEC VARIABLE .

    $default  reduce using rule 49 (expr)


State 35

   25 expr: '-' expr .
   26     | expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    $default  reduce using rule 25 (expr)


State 36

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   36     | '(' expr . ')'
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ')'      shift, and go to state 63


State 37

   14 stmt_list: stmt .

    $default  reduce using rule 14 (stmt_list)


State 38

   13 stmt: '{' stmt_list . '}'
   15 stmt_list: stmt_list . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19
    '}'       shift, and go to state 64

    stmt  go to state 65
    expr  go to state 21


State 39

   37 expr: expr AND . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 66


State 40

   38 expr: expr OR . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 67


State 41

   41 expr: expr BIT_OR . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 68


State 42

   40 expr: expr BIT_AND . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 69


State 43

   42 expr: expr BIT_XOR . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 70


State 44

   44 expr: expr L_SHIFT . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 71


State 45

   45 expr: expr R_SHIFT . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 72


State 46

   32 expr: expr GE . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 73


State 47

   33 expr: expr LE . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 74


State 48

   35 expr: expr EQ . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 75


State 49

   34 expr: expr NE . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 76


State 50

   31 expr: expr '>' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 77


State 51

   30 expr: expr '<' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 78


State 52

   26 expr: expr '+' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 79


State 53

   27 expr: expr '-' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 80


State 54

   28 expr: expr '*' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 81


State 55

   29 expr: expr '/' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 82


State 56

    5 stmt: expr ';' .

    $default  reduce using rule 5 (stmt)


State 57

    7 stmt: VARIABLE '=' expr . ';'
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ';'      shift, and go to state 83


State 58

    8 stmt: WHILE '(' expr . ')' stmt
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ')'      shift, and go to state 84


State 59

   12 stmt: FOR '(' expr . ';' expr ';' expr ';' ')' stmt
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ';'      shift, and go to state 85


State 60

    9 stmt: IF '(' expr . ')' stmt
   10     | IF '(' expr . ')' stmt ELSE stmt
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ')'      shift, and go to state 86


State 61

    6 stmt: PRINT expr ';' .

    $default  reduce using rule 6 (stmt)


State 62

   11 stmt: SWITCH '(' expr . ')' '{' switch_body '}'
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ')'      shift, and go to state 87


State 63

   36 expr: '(' expr ')' .

    $default  reduce using rule 36 (expr)


State 64

   13 stmt: '{' stmt_list '}' .

    $default  reduce using rule 13 (stmt)


State 65

   15 stmt_list: stmt_list stmt .

    $default  reduce using rule 15 (stmt_list)


State 66

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   37     | expr AND expr .
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55

    $default  reduce using rule 37 (expr)


State 67

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   38     | expr OR expr .
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55

    $default  reduce using rule 38 (expr)


State 68

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   41     | expr BIT_OR expr .
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    '+'  shift, and go to state 52
    '-'  shift, and go to state 53
    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 41 (expr)


State 69

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   40     | expr BIT_AND expr .
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    '+'  shift, and go to state 52
    '-'  shift, and go to state 53
    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 40 (expr)


State 70

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   42     | expr BIT_XOR expr .
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    '+'  shift, and go to state 52
    '-'  shift, and go to state 53
    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 42 (expr)


State 71

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   44     | expr L_SHIFT expr .
   45     | expr . R_SHIFT expr

    '+'  shift, and go to state 52
    '-'  shift, and go to state 53
    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 44 (expr)


State 72

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr
   45     | expr R_SHIFT expr .

    '+'  shift, and go to state 52
    '-'  shift, and go to state 53
    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 45 (expr)


State 73

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   32     | expr GE expr .
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55

    $default  reduce using rule 32 (expr)


State 74

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   33     | expr LE expr .
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55

    $default  reduce using rule 33 (expr)


State 75

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   35     | expr EQ expr .
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55

    $default  reduce using rule 35 (expr)


State 76

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   34     | expr NE expr .
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55

    $default  reduce using rule 34 (expr)


State 77

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   31     | expr '>' expr .
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55

    $default  reduce using rule 31 (expr)


State 78

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   30     | expr '<' expr .
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55

    $default  reduce using rule 30 (expr)


State 79

   26 expr: expr . '+' expr
   26     | expr '+' expr .
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 26 (expr)


State 80

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   27     | expr '-' expr .
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 27 (expr)


State 81

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   28     | expr '*' expr .
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    $default  reduce using rule 28 (expr)


State 82

   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   29     | expr '/' expr .
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    $default  reduce using rule 29 (expr)


State 83

    7 stmt: VARIABLE '=' expr ';' .

    $default  reduce using rule 7 (stmt)


State 84

    8 stmt: WHILE '(' expr ')' . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    stmt  go to state 88
    expr  go to state 21


State 85

   12 stmt: FOR '(' expr ';' . expr ';' expr ';' ')' stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 89


State 86

    9 stmt: IF '(' expr ')' . stmt
   10     | IF '(' expr ')' . stmt ELSE stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    stmt  go to state 90
    expr  go to state 21


State 87

   11 stmt: SWITCH '(' expr ')' . '{' switch_body '}'

    '{'  shift, and go to state 91


State 88

    8 stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 8 (stmt)


State 89

   12 stmt: FOR '(' expr ';' expr . ';' expr ';' ')' stmt
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ';'      shift, and go to state 92


State 90

    9 stmt: IF '(' expr ')' stmt .
   10     | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 93

    $default  reduce using rule 9 (stmt)


State 91

   11 stmt: SWITCH '(' expr ')' '{' . switch_body '}'

    CASE  shift, and go to state 94

    case_stmt       go to state 95
    case_stmt_list  go to state 96
    switch_body     go to state 97


State 92

   12 stmt: FOR '(' expr ';' expr ';' . expr ';' ')' stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 98


State 93

   10 stmt: IF '(' expr ')' stmt ELSE . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    stmt  go to state 99
    expr  go to state 21


State 94

   16 case_stmt: CASE . '(' expr ')' ':' stmt_list BREAK ';'

    '('  shift, and go to state 100


State 95

   18 case_stmt_list: case_stmt .

    $default  reduce using rule 18 (case_stmt_list)


State 96

   19 case_stmt_list: case_stmt_list . case_stmt
   20 switch_body: case_stmt_list .
   21            | case_stmt_list . default_stmt

    CASE     shift, and go to state 94
    DEFAULT  shift, and go to state 101

    $default  reduce using rule 20 (switch_body)

    case_stmt     go to state 102
    default_stmt  go to state 103


State 97

   11 stmt: SWITCH '(' expr ')' '{' switch_body . '}'

    '}'  shift, and go to state 104


State 98

   12 stmt: FOR '(' expr ';' expr ';' expr . ';' ')' stmt
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ';'      shift, and go to state 105


State 99

   10 stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 10 (stmt)


State 100

   16 case_stmt: CASE '(' . expr ')' ':' stmt_list BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 28
    DOUBLE    shift, and go to state 6
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    '('       shift, and go to state 18

    expr  go to state 106


State 101

   17 default_stmt: DEFAULT . ':' stmt_list BREAK ';'

    ':'  shift, and go to state 107


State 102

   19 case_stmt_list: case_stmt_list case_stmt .

    $default  reduce using rule 19 (case_stmt_list)


State 103

   21 switch_body: case_stmt_list default_stmt .

    $default  reduce using rule 21 (switch_body)


State 104

   11 stmt: SWITCH '(' expr ')' '{' switch_body '}' .

    $default  reduce using rule 11 (stmt)


State 105

   12 stmt: FOR '(' expr ';' expr ';' expr ';' . ')' stmt

    ')'  shift, and go to state 108


State 106

   16 case_stmt: CASE '(' expr . ')' ':' stmt_list BREAK ';'
   26 expr: expr . '+' expr
   27     | expr . '-' expr
   28     | expr . '*' expr
   29     | expr . '/' expr
   30     | expr . '<' expr
   31     | expr . '>' expr
   32     | expr . GE expr
   33     | expr . LE expr
   34     | expr . NE expr
   35     | expr . EQ expr
   37     | expr . AND expr
   38     | expr . OR expr
   40     | expr . BIT_AND expr
   41     | expr . BIT_OR expr
   42     | expr . BIT_XOR expr
   44     | expr . L_SHIFT expr
   45     | expr . R_SHIFT expr

    AND      shift, and go to state 39
    OR       shift, and go to state 40
    BIT_OR   shift, and go to state 41
    BIT_AND  shift, and go to state 42
    BIT_XOR  shift, and go to state 43
    L_SHIFT  shift, and go to state 44
    R_SHIFT  shift, and go to state 45
    GE       shift, and go to state 46
    LE       shift, and go to state 47
    EQ       shift, and go to state 48
    NE       shift, and go to state 49
    '>'      shift, and go to state 50
    '<'      shift, and go to state 51
    '+'      shift, and go to state 52
    '-'      shift, and go to state 53
    '*'      shift, and go to state 54
    '/'      shift, and go to state 55
    ')'      shift, and go to state 109


State 107

   17 default_stmt: DEFAULT ':' . stmt_list BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    stmt       go to state 37
    stmt_list  go to state 110
    expr       go to state 21


State 108

   12 stmt: FOR '(' expr ';' expr ';' expr ';' ')' . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    stmt  go to state 111
    expr  go to state 21


State 109

   16 case_stmt: CASE '(' expr ')' . ':' stmt_list BREAK ';'

    ':'  shift, and go to state 112


State 110

   15 stmt_list: stmt_list . stmt
   17 default_stmt: DEFAULT ':' stmt_list . BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    BREAK     shift, and go to state 113
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    stmt  go to state 65
    expr  go to state 21


State 111

   12 stmt: FOR '(' expr ';' expr ';' expr ';' ')' stmt .

    $default  reduce using rule 12 (stmt)


State 112

   16 case_stmt: CASE '(' expr ')' ':' . stmt_list BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    stmt       go to state 37
    stmt_list  go to state 114
    expr       go to state 21


State 113

   17 default_stmt: DEFAULT ':' stmt_list BREAK . ';'

    ';'  shift, and go to state 115


State 114

   15 stmt_list: stmt_list . stmt
   16 case_stmt: CASE '(' expr ')' ':' stmt_list . BREAK ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    DOUBLE    shift, and go to state 6
    WHILE     shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    SWITCH    shift, and go to state 11
    BREAK     shift, and go to state 116
    NOT       shift, and go to state 12
    BIT_NOT   shift, and go to state 13
    INC       shift, and go to state 14
    DEC       shift, and go to state 15
    '-'       shift, and go to state 16
    ';'       shift, and go to state 17
    '('       shift, and go to state 18
    '{'       shift, and go to state 19

    stmt  go to state 65
    expr  go to state 21


State 115

   17 default_stmt: DEFAULT ':' stmt_list BREAK ';' .

    $default  reduce using rule 17 (default_stmt)


State 116

   16 case_stmt: CASE '(' expr ')' ':' stmt_list BREAK . ';'

    ';'  shift, and go to state 117


State 117

   16 case_stmt: CASE '(' expr ')' ':' stmt_list BREAK ';' .

    $default  reduce using rule 16 (case_stmt)
